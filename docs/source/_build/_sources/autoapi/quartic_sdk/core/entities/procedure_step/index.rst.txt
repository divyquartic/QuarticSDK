:mod:`quartic_sdk.core.entities.procedure_step`
===============================================

.. py:module:: quartic_sdk.core.entities.procedure_step

.. autoapi-nested-parse::

   The given file contains the class to refer to the ProcedureStep entity



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   quartic_sdk.core.entities.procedure_step.ProcedureStep



.. class:: ProcedureStep

   Bases: :class:`quartic_sdk.core.entities.base.Base`

   The given class refers to the ProcedureStep entity which is created based upon the
   procedure step response returned by the API

   .. method:: __repr__(self)

      Override the method to return the ProcedureStep name


   .. method:: fetch_substep_details(self, query_params={})

      This method is used for fetching procedure substep details like Operation/Phase/PhaseStep
      :param query_params: Dictionary of filter conditions
      :return: List of ProcedureStep(ProcedureStep Entity) Objects


   .. method:: create_procedure_step(self, name, start_batch_tag, stop_batch_tag, procedure, order, start_rule, stop_rule, asset_list)

      This method is used to create Procedure Step like Operation/Phase/PhaseStep
      :param name: ProcedureStep Name
      :param start_batch_tag: Tag Object
      :param stop_batch_tag: Tag Object
      :param procedure: Procedure Object
      :param order: Sequence in which we want to add child nodes inside parent(UnitProcedure/Operation/Phase) node
      :param start_rule: Rule (Util Class) Object
      :param stop_rule: Rule (Util Class) Object
      :param asset_list: List containing asset ids
      :return: ProcedureStep(ProcedureStep Entity) Object



